name: Android Build & Telegram Upload

on:
  workflow_dispatch:
    inputs:
      send_telegram:
        description: "Send APK to Telegram?"
        required: true
        default: "false"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.5"  
          channel: "stable"
          architecture: "x64"

      - name: Verify Flutter version
        run: flutter --version  # Debug step to confirm Flutter/Dart version

      - name: Update Dart SDK constraint in pubspec.yaml
        run: |
          echo "Updating Dart SDK constraint in pubspec.yaml"
          sed -i 's/sdk:.*$/sdk: ">=2.12.0 <4.0.0"/' pubspec.yaml || true  # Ensure SDK allows Dart 3.6.0

      - name: Modify pubspec.yaml to fix async dependency
        run: |
          echo "Adding dependency override for async in pubspec.yaml"
          sed -i '/^dependency_overrides:/d' pubspec.yaml || true
          echo -e "\ndependency_overrides:\n  async: 2.11.0" >> pubspec.yaml

      - name: Create key.properties for signing
        run: |
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=/home/runner/work/defyxVPN/defyxVPN/android/app/keystore.jks" >> android/key.properties

      - name: Decode and save keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/keystore.jks

      - name: Make build_ci.sh executable
        run: chmod +x scripts/build_ci.sh

      - name: Run build_ci.sh
        run: ./scripts/build_ci.sh

      - name: Upload artifact (for debugging/download)
        uses: actions/upload-artifact@v4
        with:
          name: DXcore-android
          path: build/app/outputs/flutter-apk/app-release.apk

  release-to-telegram:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.send_telegram == 'true' }}
    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: DXcore-android
          path: release/

      - name: Send to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          APP_VERSION: ${{ env.APP_VERSION }}
        run: |
          echo "Sending APK to Telegram..."
          curl -F chat_id="$TELEGRAM_CHAT_ID" \
               -F document=@release/app-release.apk \
               -F caption="$(echo -e "ðŸš€ New DXcore Android Build\nðŸ“Œ Version: $APP_VERSION\nðŸ”— Source: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}")" \
               "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument"
